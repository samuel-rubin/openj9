/*******************************************************************************
 * Copyright (c) 2018, 2019 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
*******************************************************************************/

def ARCH = (params.ARCH) ? params.ARCH : "unknown"
def OS = (params.OS) ? params.OS : "unknown"
def validArch = ["x86", "s390x", "ppc64le"]
if(params.ghprbPullId) {
    PARSE = "${ghprbCommentBody}".trim().toLowerCase().split()
    for(i = 0; i < PARSE.length - 4; i++) {
        if(PARSE[i] == "jenkins" && PARSE[i+1] == "build" && PARSE[i+2] == "docker") {
            ARCH = PARSE[i+3]
            OS = PARSE[i+4]
            break
        }
    }
}
if("${OS}" == "unknown" || !(validArch.contains(ARCH))) {
    error("Invalid Parameters. Either ARCH:'${ARCH}' or OS:'${OS}' were not declared properly")
} else {
    NAMESPACE = "eclipse"
    REPOSITORY = "${NAMESPACE}/openj9-jenkins-agent-${ARCH}-${OS}"
    timeout(time: 5, unit: 'HOURS') {
        timestamps {
            node("sw.tool.docker&&hw.arch.${ARCH}") {
                try{
                    def TEMP_DESC = (currentBuild.description) ? currentBuild.description + "<br>" : ""
                    currentBuild.description = TEMP_DESC + "<a href=https://ci.eclipse.org/openj9/computer/${NODE_NAME}>${NODE_NAME}</a><br>"
                    currentBuild.description += "Docker image:<a href=https://hub.docker.com/r/${REPOSITORY}>${REPOSITORY}</a>"
                    stage("Clone") {
                        checkout scm
                    }
                    stage("Build") {
                        if(params.ghprbPullId) {
                            TAGS = "-t ${REPOSITORY}:PR${ghprbPullId}"
                        } else {
                            TAGS = "-t ${REPOSITORY}:${BUILD_NUMBER} -t ${REPOSITORY}:latest"
                        }
                        dir("buildenv/jenkins/docker-slaves/${ARCH}/${OS}") {
                            sh "cp ${WORKSPACE}/buildenv/jenkins/authorized_keys ./"
                            sh "touch ./known_hosts"
                            if(env.KNOWN_HOSTS){
                                sh "ssh-keyscan ${KNOWN_HOSTS} >> ./known_hosts"
                            }
                            sh "docker build -f Dockerfile ${TAGS} ."
                        }
                    }
                    stage("Push") {
                        withCredentials([usernamePassword(credentialsId: '7fb9f8f0-14bf-469a-9132-91db4dd80c48', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                            sh "docker login --username=\"${USER}\" --password=\"${PASS}\""
                        }
                        if(params.ghprbPullId) {
                            sh "docker push ${REPOSITORY}:PR${ghprbPullId}"
                        } else {
                            sh "docker push ${REPOSITORY}:${BUILD_NUMBER}"
                            sh "docker push ${REPOSITORY}:latest"
                        }
                        sh "docker logout"
                    }
                } finally {
                    sh "docker system prune -af"
                    cleanWs()
                }
            }
        }
    }
}
